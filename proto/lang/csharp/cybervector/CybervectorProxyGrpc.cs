// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cybervector_proxy.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cybervector {
  public static partial class CyberVectorProxyService
  {
    static readonly string __ServiceName = "cybervector.CyberVectorProxyService";

    static readonly grpc::Marshaller<global::Cybervector.SubscribeRequest> __Marshaller_cybervector_SubscribeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cybervector.SubscribeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cybervector.ProxyMessaage> __Marshaller_cybervector_ProxyMessaage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cybervector.ProxyMessaage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cybervector.UnsubscribeRequest> __Marshaller_cybervector_UnsubscribeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cybervector.UnsubscribeRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Cybervector.SubscribeRequest, global::Cybervector.ProxyMessaage> __Method_Subscribe = new grpc::Method<global::Cybervector.SubscribeRequest, global::Cybervector.ProxyMessaage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_cybervector_SubscribeRequest,
        __Marshaller_cybervector_ProxyMessaage);

    static readonly grpc::Method<global::Cybervector.UnsubscribeRequest, global::Cybervector.ProxyMessaage> __Method_UnSubscribe = new grpc::Method<global::Cybervector.UnsubscribeRequest, global::Cybervector.ProxyMessaage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnSubscribe",
        __Marshaller_cybervector_UnsubscribeRequest,
        __Marshaller_cybervector_ProxyMessaage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cybervector.CybervectorProxyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CyberVectorProxyService</summary>
    public abstract partial class CyberVectorProxyServiceBase
    {
      public virtual global::System.Threading.Tasks.Task Subscribe(global::Cybervector.SubscribeRequest request, grpc::IServerStreamWriter<global::Cybervector.ProxyMessaage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Cybervector.ProxyMessaage> UnSubscribe(global::Cybervector.UnsubscribeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CyberVectorProxyService</summary>
    public partial class CyberVectorProxyServiceClient : grpc::ClientBase<CyberVectorProxyServiceClient>
    {
      /// <summary>Creates a new client for CyberVectorProxyService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CyberVectorProxyServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CyberVectorProxyService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CyberVectorProxyServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CyberVectorProxyServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CyberVectorProxyServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Cybervector.ProxyMessaage> Subscribe(global::Cybervector.SubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Cybervector.ProxyMessaage> Subscribe(global::Cybervector.SubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      public virtual global::Cybervector.ProxyMessaage UnSubscribe(global::Cybervector.UnsubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnSubscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cybervector.ProxyMessaage UnSubscribe(global::Cybervector.UnsubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnSubscribe, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cybervector.ProxyMessaage> UnSubscribeAsync(global::Cybervector.UnsubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnSubscribeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cybervector.ProxyMessaage> UnSubscribeAsync(global::Cybervector.UnsubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnSubscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CyberVectorProxyServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CyberVectorProxyServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CyberVectorProxyServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe)
          .AddMethod(__Method_UnSubscribe, serviceImpl.UnSubscribe).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CyberVectorProxyServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Subscribe, serviceImpl.Subscribe);
      serviceBinder.AddMethod(__Method_UnSubscribe, serviceImpl.UnSubscribe);
    }

  }
}
#endregion
