using Cybervector;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;

namespace Cyb3rPod
{
    public class EscapePodIntent
    {
        public class ObjectId
        {
            [JsonProperty("$oid")]
            public string Oid { get; set; }
            public static ObjectId Empty { get { return new ObjectId(""); } }

            public ObjectId(string oid)
            {
                this.Oid = oid;
            }

            public static implicit operator string(ObjectId oid)
            {
                return oid.Oid;
            }
            public static implicit operator ObjectId(string oid)
            {
                return new ObjectId(oid);
            }
        }


        public class IntentExtendedOptions
        {
            [JsonProperty("external_parser")]
            public bool ExternalParser { get; set; }

            //[JsonProperty("block_list")]
            //public string BlockList { get; set; }
        }


        [JsonProperty("_id")]
        public ObjectId Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("intent")]
        public string Intent { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("utterance_list")]
        public string Utterance { get; set; }

        [JsonProperty("extended_options")]
        public IntentExtendedOptions ExtendedOptions { get; set; }

        [JsonProperty("response_parameters")]
        public Dictionary<string, string> ResponseParameters { get; set; }

        //[JsonProperty("inversekeyphrases")]
        //public string InverseKeyPhrases { get; set; }



        public EscapePodIntent(string name, string intent, string utternace, string description = null)
        {
            this.Name = name;
            this.Intent = intent;
            this.Utterance = utternace;
            this.Description = string.IsNullOrEmpty(description) ? "Automatic Intent dynamically generated by Cyb3rVector" : description;

            this.ExtendedOptions = new IntentExtendedOptions() { ExternalParser = true };
            this.ResponseParameters = new Dictionary<string, string>();
            this.ResponseParameters.Add("final_intent", this.Intent);
        }

        public string GetFinalIntent()
        {
            if ((this.ResponseParameters != null) && (this.ResponseParameters.ContainsKey("final_intent")))
                return this.ResponseParameters["final_intent"];
            return this.Intent;
        }

        public string ToJson()
        {
            //string newIntentJson = "{";
            //newIntentJson += string.Format("'intent':'{0}',", this.Intent);
            //newIntentJson += "'description':'Automatic Intent dynamically generated by Cyb3rVector',";
            //newIntentJson += "'extended_options':{'external_parser':true,'block_list':null},";
            //newIntentJson += "'inversekeyphrases':null,";
            //newIntentJson += string.Format("'name':'{0}',", this.Name);
            //newIntentJson += string.Format("'utterance_list':'{0}',", this.Utterance);
            //newIntentJson += "'response_parameters':{" + string.Format("'final_intent':'{0}'", this.Intent) + "}";
            //newIntentJson += "}".Replace("'", "\"");

            string newIntentJson = JsonConvert.SerializeObject(this, new JsonSerializerSettings() { MissingMemberHandling = MissingMemberHandling.Ignore, NullValueHandling = NullValueHandling.Ignore });
            return newIntentJson;
        }

        public override string ToString()
        {
            return this.Intent;
        }

        public static List<EscapePodIntent> FromResponse(SelectIntentResponse selectResponse)
        {
            List<EscapePodIntent> result = new List<EscapePodIntent>();
            foreach (string key in selectResponse.IntentData.Keys)
            {
                try
                {
                    string intentJson = selectResponse.IntentData[key];
                    result.Add(JsonConvert.DeserializeObject<EscapePodIntent>(intentJson,
                        new JsonSerializerSettings() { MissingMemberHandling = MissingMemberHandling.Ignore }));
                }
                catch (Exception error)
                {
                    throw error;
                }
            }
            return result;
        }
    }
}